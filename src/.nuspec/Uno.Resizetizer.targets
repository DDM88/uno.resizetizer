<?xml version="1.0" encoding="UTF-8"?>
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

	<ItemGroup>
		<AvailableItemName Include="UnoAsset" />
		<AvailableItemName Include="UnoImage" />
		<AvailableItemName Include="UnoIcon" />
		<AvailableItemName Include="MauiSplashScreen" />
	</ItemGroup>

	<PropertyGroup>
		<_ResizetizerTaskAssemblyName>$(MSBuildThisFileDirectory)Uno.Resizetizer.dll</_ResizetizerTaskAssemblyName>
	</PropertyGroup>

	<UsingTask
        AssemblyFile="$(_ResizetizerTaskAssemblyName)"
        TaskName="Uno.Resizetizer.ResizetizeImages" />

	<UsingTask
        AssemblyFile="$(_ResizetizerTaskAssemblyName)"
        TaskName="Uno.Resizetizer.DetectInvalidResourceOutputFilenamesTask"  />

	<UsingTask
        AssemblyFile="$(_ResizetizerTaskAssemblyName)"
        TaskName="Uno.Resizetizer.CreatePartialInfoPlistTask"  />

	<UsingTask
        AssemblyFile="$(_ResizetizerTaskAssemblyName)"
        TaskName="Uno.Resizetizer.GenerateSplashAndroidResources"  />

	<UsingTask
        AssemblyFile="$(_ResizetizerTaskAssemblyName)"
        TaskName="Uno.Resizetizer.GenerateSplashStoryboard"  />

	<UsingTask
        AssemblyFile="$(_ResizetizerTaskAssemblyName)"
        TaskName="Uno.Resizetizer.TizenSplashUpdater"  />

	<UsingTask
        AssemblyFile="$(_ResizetizerTaskAssemblyName)"
        TaskName="Uno.Resizetizer.GenerateSplashAssets"  />

	<UsingTask
        AssemblyFile="$(_ResizetizerTaskAssemblyName)"
        TaskName="Uno.Resizetizer.GetUnoAssetPath"  />

	<UsingTask
        AssemblyFile="$(_ResizetizerTaskAssemblyName)"
        TaskName="Uno.Resizetizer.GeneratePackageAppxManifest"  />

	<UsingTask
		  AssemblyFile="$(_ResizetizerTaskAssemblyName)"
		  TaskName="Uno.Resizetizer.GenerateTizenManifest"  />

	<PropertyGroup>
		<CleanDependsOn>
			$(CleanDependsOn);
			_CleanResizetizer;
		</CleanDependsOn>

		<_ResizetizerInputsFile>$(IntermediateOutputPath)UnoImage.inputs</_ResizetizerInputsFile>
		<_ResizetizerStampFile>$(IntermediateOutputPath)UnoImage.stamp</_ResizetizerStampFile>
		<_MauiSplashInputsFile>$(IntermediateOutputPath)mauisplash.inputs</_MauiSplashInputsFile>
		<_MauiSplashStampFile>$(IntermediateOutputPath)mauisplash.stamp</_MauiSplashStampFile>
		<_MauiManifestStampFile>$(IntermediateOutputPath)mauimanifest.stamp</_MauiManifestStampFile>


		<_ResizetizerIntermediateOutputRoot>$(IntermediateOutputPath)resizetizer\</_ResizetizerIntermediateOutputRoot>
		<_UnoIntermediateImages>$(_ResizetizerIntermediateOutputRoot)r\</_UnoIntermediateImages>
		<_UnoIntermediateAppIcon>$(_ResizetizerIntermediateOutputRoot)AppIcons\</_UnoIntermediateAppIcon>
		<_MauiIntermediateSplashScreen>$(_ResizetizerIntermediateOutputRoot)sp\</_MauiIntermediateSplashScreen>
		<_MauiIntermediateManifest>$(_ResizetizerIntermediateOutputRoot)m\</_MauiIntermediateManifest>
		<_MauiIntermediateStoryboard>$(_MauiIntermediateSplashScreen)MauiSplash.storyboard</_MauiIntermediateStoryboard>

		<_ResizetizerPlatformIdentifier>$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)'))</_ResizetizerPlatformIdentifier>
		<_ResizetizerNoTargetPlatform Condition="'$(_ResizetizerPlatformIdentifier)' == ''">True</_ResizetizerNoTargetPlatform>
		<_ResizetizerPlatformIsAndroid Condition="'$(_ResizetizerPlatformIdentifier)' == 'android'">True</_ResizetizerPlatformIsAndroid>
		<_ResizetizerPlatformIsiOS Condition="'$(_ResizetizerPlatformIdentifier)' == 'ios'">True</_ResizetizerPlatformIsiOS>
		<_ResizetizerPlatformIsMacCatalyst Condition="'$(_ResizetizerPlatformIdentifier)' == 'maccatalyst'">True</_ResizetizerPlatformIsMacCatalyst>
		<_ResizetizerPlatformIsmacOS Condition="'$(_ResizetizerPlatformIdentifier)' == 'macos'">True</_ResizetizerPlatformIsmacOS>
		<_ResizetizerPlatformIstvOS Condition="'$(_ResizetizerPlatformIdentifier)' == 'tvos'">True</_ResizetizerPlatformIstvOS>
		<_ResizetizerPlatformIsWindows Condition="$(_ResizetizerPlatformIdentifier.Contains('windows')) == 'True'">True</_ResizetizerPlatformIsWindows>
		<_ResizetizerPlatformIsTizen Condition="'$(_ResizetizerPlatformIdentifier)' == 'tizen'">True</_ResizetizerPlatformIsTizen>

		<ResizetizerIncludeSelfProject Condition="'$(ResizetizerIncludeSelfProject)' == ''">False</ResizetizerIncludeSelfProject>

		<_ResizetizerDefaultInvalidFilenamesErrorMessage>One or more invalid file names were detected.  File names must be lowercase, start and end with a letter character, and contain only alphanumeric characters or underscores: </_ResizetizerDefaultInvalidFilenamesErrorMessage>

		<_WasmHasPWAManifest>False</_WasmHasPWAManifest>
		<_WasmHasPWAManifest Condition="'$(WasmPWAManifestFile)' != ''">True</_WasmHasPWAManifest>
		<_WasmPwaManifestPath Condition="'$(_WasmHasPWAManifest)' == 'True'">$(MSBuildProjectDirectory)\$(WasmPWAManifestFile)</_WasmPwaManifestPath>
	</PropertyGroup>

	<PropertyGroup Condition="'$(TargetFrameworkIdentifier)' == '.NETCoreApp'">
		<_ResizetizerIsNetCore>True</_ResizetizerIsNetCore>
		<_ResizetizerIsAndroidApp Condition=" '$(_ResizetizerPlatformIsAndroid)' == 'True' And '$(AndroidApplication)' == 'True'">True</_ResizetizerIsAndroidApp>
		<_ResizetizerIsiOSApp Condition="( '$(_ResizetizerPlatformIsiOS)' == 'True' OR '$(_ResizetizerPlatformIsMacCatalyst)' == 'True' ) And ('$(OutputType)' == 'Exe' Or '$(IsAppExtension)' == 'True')">True</_ResizetizerIsiOSApp>
		<_ResizetizerIsWPFApp Condition="'$(UseWPF)' == 'True'">True</_ResizetizerIsWPFApp>
		<_ResizetizerIsWindowsAppSdk Condition="('$(ProjectReunionWinUI)'=='True' Or '$(WindowsAppSDKWinUI)'=='True') And '$(_ResizetizerPlatformIsWindows)' == 'True' And ('$(OutputType)' == 'WinExe' Or '$(OutputType)' == 'Exe')">True</_ResizetizerIsWindowsAppSdk>
		<_ResizetizerIsTizenApp Condition="'$(_ResizetizerPlatformIsTizen)' == 'True' And ( '$(OutputType)' == 'Exe' )">True</_ResizetizerIsTizenApp>
		<_ResizetizerIsWasm Condition="'$(_ResizetizerIsAndroidApp)' != 'True' And '$(_ResizetizerIsiOSApp)' != 'True' And '$(_ResizetizerIsWPFApp)' != 'True' And '$(_ResizetizerIsWindowsAppSdk)' != 'True'">True</_ResizetizerIsWasm>

	</PropertyGroup>

	<PropertyGroup Condition="'$(_ResizetizerIsAndroidApp)' == 'True' Or '$(_ResizetizerIsiOSApp)' == 'True' Or '$(_ResizetizerIsWPFApp)' == 'True' Or '$(_ResizetizerIsWindowsAppSdk)' == 'True' Or '$(_ResizetizerIsTizenApp)' == 'True' Or '$(_ResizetizerIsWasm)' == 'True'">
		<_ResizetizerIsCompatibleApp>True</_ResizetizerIsCompatibleApp>

		<ResizetizeDependsOnTargets>
			$(ResizetizeDependsOnTargets);
			ResizetizeCollectItems;
			ProcessMauiSplashScreens;
		</ResizetizeDependsOnTargets>
	</PropertyGroup>

	<PropertyGroup Condition="$(_ResizetizerNoTargetPlatform) == 'True'">
		<ResizetizerIncludeSelfProject>true</ResizetizerIncludeSelfProject>
		<ResizetizerPlatformType>netstandard</ResizetizerPlatformType>

		<ResizetizeBeforeTargets>
			$(ResizetizeBeforeTargets);
			AssignTargetPaths;

		</ResizetizeBeforeTargets>
	
		<ResizetizeAfterTargets>
			ResizetizeCollectItems;
			$(ResizetizeAfterTargets);
			UnoAssetsGeneration;
			BuildDist;
		</ResizetizeAfterTargets>
	</PropertyGroup>

	<!-- Wasm -->
	<PropertyGroup Condition="'$(_ResizetizerIsWasm)' == 'True'">
		<ResizetizerPlatformType>wasm</ResizetizerPlatformType>
		<ResizetizerIncludeSelfProject>true</ResizetizerIncludeSelfProject>

		<ResizetizeBeforeTargets>
			$(ResizetizeBeforeTargets);
			AssignTargetPaths;

		</ResizetizeBeforeTargets>
	
		<ResizetizeAfterTargets>
			ResizetizeCollectItems;
			$(ResizetizeAfterTargets);
			UnoAssetsGeneration;
			BuildDist;
		</ResizetizeAfterTargets>
	</PropertyGroup>

	<!-- iOS -->
	<PropertyGroup Condition="'$(_ResizetizerIsiOSApp)' == 'True'">
		<ResizetizerPlatformType>ios</ResizetizerPlatformType>

		<!-- We don't want to resizetize anything for an inner build when building a universal app, it's enough to only do it in the outer build -->
		<DisableResizetizer Condition="'$(_IsMultiRidBuild)' == 'true'">true</DisableResizetizer>

		<ResizetizeBeforeTargets>
			UnoAssetsGeneration;
			_CollectBundleResources;
			_BeforeCoreCompileImageAssets;
		</ResizetizeBeforeTargets>

		<CollectBundleResourcesDependsOn>
			$(CollectBundleResourcesDependsOn);
			ResizetizeCollectItems;
		</CollectBundleResourcesDependsOn>

		<CompileImageAssetsDependsOn>
			$(CompileImageAssetsDependsOn);
			ResizetizeCollectItems;
		</CompileImageAssetsDependsOn>

		<ResizetizeAfterTargets>
			$(ResizetizeAfterTargets);
			ResizetizeCollectItems;
		</ResizetizeAfterTargets>

		<CollectAppManifestsDependsOn>
			ProcessMauiSplashScreens;
			$(CollectAppManifestsDependsOn)
		</CollectAppManifestsDependsOn>
	</PropertyGroup>

	<!-- Android -->
	<PropertyGroup Condition="'$(_ResizetizerIsAndroidApp)' == 'True'">
		<ResizetizerPlatformType>android</ResizetizerPlatformType>
		<ResizetizeBeforeTargets>
			UnoAssetsGeneration;
			UnoResourcesGeneration;
			$(ResizetizeBeforeTargets);
			_GenerateAndroidResourceDir;
		</ResizetizeBeforeTargets>

		<ResizetizeCollectItemsBeforeTargets>
			_ComputeAndroidResourcePaths;
			$(ResizetizeCollectItemsAfterTargets);
			UnoAssetsGeneration;
		</ResizetizeCollectItemsBeforeTargets>

		<ResizetizeAfterTargets>
			ResizetizeCollectItems;
			$(ResizetizeAfterTargets);
			UnoAssetsGeneration;
		</ResizetizeAfterTargets>
	</PropertyGroup>

	<!-- UWP / WinUI -->
	<PropertyGroup Condition="'$(_ResizetizerIsUWPApp)' == 'True' Or '$(_ResizetizerIsWindowsAppSdk)' == 'True'">
		<ResizetizerPlatformType>uwp</ResizetizerPlatformType>

		<ResizetizeBeforeTargets>
			UnoAssetsGeneration;
			$(ResizetizeBeforeTargets);
			AssignTargetPaths;
		</ResizetizeBeforeTargets>

		<MauiGeneratePackageAppxManifestDependsOnTargets>
			$(MauiGeneratePackageAppxManifestDependsOnTargets);
			ResizetizeCollectItems;
		</MauiGeneratePackageAppxManifestDependsOnTargets>
	</PropertyGroup>

	<!-- WPF -->
	<PropertyGroup Condition="'$(_ResizetizerIsWPFApp)' == 'True'">
		<ResizetizerPlatformType>wpf</ResizetizerPlatformType>

		<ResizetizeBeforeTargets>
			$(ResizetizeBeforeTargets);
			FileClassification;
		</ResizetizeBeforeTargets>
	</PropertyGroup>

	<!-- Tizen -->
	<PropertyGroup Condition="'$(_ResizetizerIsTizenApp)' == 'True'">
		<ResizetizerPlatformType>tizen</ResizetizerPlatformType>

		<ResizetizeBeforeTargets>
			$(ResizetizeBeforeTargets);
			PrepareResources;
		</ResizetizeBeforeTargets>

		<ResizetizeAfterTargets>
			$(ResizetizeAfterTargets);
			ResizetizeCollectItems;
		</ResizetizeAfterTargets>
	</PropertyGroup>

	<!-- Finds absolute paths to any UnoImage in this project -->
	<!-- App head projects will invoke this target on their project references to collect images -->
	<Target Name="GetUnoItems" Outputs="@(ExportedUnoItem)">
		<ItemGroup>
			<UnoItem Include="@(UnoImage)" ItemGroupName="UnoImage" Condition="'%(UnoImage.ForegroundFile)' == ''" />
			<UnoItem Include="@(UnoImage)" ItemGroupName="UnoImage" Condition="'%(UnoImage.ForegroundFile)' != ''" ForegroundFile="$([System.IO.Path]::GetFullPath('%(UnoImage.ForegroundFile)'))" ProjectDirectory="$(MSBuildProjectDirectory)" />
			<UnoItem Include="@(UnoIcon)" ItemGroupName="UnoIcon" Condition="'%(UnoIcon.ForegroundFile)' != ''" ForegroundFile="$([System.IO.Path]::GetFullPath('%(UnoIcon.ForegroundFile)'))" />
			<UnoItem Include="@(UnoAsset)" ItemGroupName="UnoAsset" ProjectDirectory="$(MSBuildProjectDirectory)" />
			<UnoItem Include="@(MauiSplashScreen)" ItemGroupName="MauiSplashScreen" />
		</ItemGroup>

		<ConvertToAbsolutePath Paths="@(UnoItem)">
			<Output TaskParameter="AbsolutePaths" ItemName="ExportedUnoItem" />
		</ConvertToAbsolutePath>
	</Target>


	<!-- Collect images from referenced projects -->
	<Target Name="ResizetizeCollectItems"
        Condition="'$(_ResizetizerIsCompatibleApp)' == 'True' And '$(DisableResizetizer)' != 'true'"
        BeforeTargets="$(ResizetizeCollectItemsBeforeTargets)"
        AfterTargets="$(ResizetizeCollectItemsAfterTargets)">

		<CallTarget Targets="GetUnoItems" Condition="'$(ResizetizerIncludeSelfProject)' == 'True'">
			<Output
                TaskParameter="TargetOutputs"
                ItemName="ImportedUnoItem" />
		</CallTarget>

		<ItemGroup>
			<UnoImage
                Include="@(ImportedUnoItem)"
                Condition="'%(ImportedUnoItem.ItemGroupName)' == 'UnoImage'"
				DirectoryPath="$(_SharedProjectPath)"/>
			<UnoIcon
                Include="@(ImportedUnoItem)"
                Condition="'%(ImportedUnoItem.ItemGroupName)' == 'UnoIcon'" />
			<UnoAsset
                Include="@(ImportedUnoItem)"
                Condition="'%(ImportedUnoItem.ItemGroupName)' == 'UnoAsset'" />
			<MauiSplashScreen
                Include="@(ImportedUnoItem)"
                Condition="'%(ImportedUnoItem.ItemGroupName)' == 'MauiSplashScreen'" />
		</ItemGroup>

		<!-- Make sure animated gifs are not resized by default -->
		<ItemGroup>
			<UnoImage Update="@(UnoImage)" Resize="False" Condition="'%(UnoImage.Extension)' == '.gif' and '%(UnoImage.Resize)' == ''" />
		</ItemGroup>

		<!-- Map @(UnoIcon) to @(UnoImage IsAppIcon=true) -->
		<ItemGroup>
			<UnoImage Include="@(UnoIcon)" IsAppIcon="True" />
		</ItemGroup>

		<!-- Write out item spec and metadata to a file we can use as an inputs for the resize target -->
		<!-- This allows us to invalidate the build based on not just input image files changing but project item metadata as well -->
		<WriteLinesToFile
            File="$(_ResizetizerInputsFile)"
            Lines="@(UnoImage->'File=%(Identity);Link=%(Link);BaseSize=%(BaseSize);Resize=%(Resize);TintColor=%(TintColor);Color=%(Color);IsAppIcon=%(IsAppIcon);ForegroundScale=%(ForegroundScale);ForegroundFile=%(ForegroundFile)')"
            Overwrite="true"
            WriteOnlyWhenDifferent="true" />

		<WriteLinesToFile
            File="$(_MauiSplashInputsFile)"
            Lines="@(MauiSplashScreen->'File=%(Identity);Link=%(Link);BaseSize=%(BaseSize);Resize=%(Resize);TintColor=%(TintColor);Color=%(Color);ForegroundScale=%(ForegroundScale)')"
            Overwrite="true"
            WriteOnlyWhenDifferent="true" />

		<ItemGroup>
			<FileWrites Include="$(_ResizetizerInputsFile)" />
			<FileWrites Include="$(_MauiSplashInputsFile)" />
		</ItemGroup>
	</Target>

	<Target Name="ProcessUnoAssets">
		<PropertyGroup Condition="'$(_ResizetizerIsUWPApp)' == 'True' Or '$(_ResizetizerIsWindowsAppSdk)' == 'True'">
			<_UnoAssetItemMetadata>TargetPath</_UnoAssetItemMetadata>
		</PropertyGroup>
		<ItemGroup Condition="'$(_ResizetizerIsUWPApp)' == 'True' Or '$(_ResizetizerIsWindowsAppSdk)' == 'True'">
			<!-- Windows does not recognize %(LogicalName), so we must copy it to %(Link) -->
			<UnoAsset Update="@(UnoAsset)" Link="%(UnoAsset.LogicalName)" Condition="'%(UnoAsset.Link)' == '' And '%(UnoAsset.LogicalName)' != ''" />
		</ItemGroup>
		<PropertyGroup Condition="'$(_ResizetizerIsTizenApp)' == 'True'">
			<_UnoAssetItemMetadata>TizenTpkFileName</_UnoAssetItemMetadata>
		</PropertyGroup>
		<ItemGroup Condition="'$(_ResizetizerIsTizenApp)' == 'True'">
			<UnoAsset Update="@(UnoAsset)" Link="%(UnoAsset.LogicalName)" Condition="'%(UnoAsset.Link)' == '' And '%(UnoAsset.LogicalName)' != ''" />
		</ItemGroup>
		<GetUnoAssetPath
            ProjectDirectory="$(MSBuildProjectDirectory)"
            ItemMetadata="$(_UnoAssetItemMetadata)"
            Input="@(UnoAsset)">
			<Output ItemName="AndroidAsset"          TaskParameter="Output" Condition="'$(_ResizetizerIsAndroidApp)' == 'True'" />
			<Output ItemName="Content"               TaskParameter="Output" Condition="'$(_ResizetizerIsiOSApp)' == 'True'" />
			<Output ItemName="ContentWithTargetPath" TaskParameter="Output" Condition="'$(_ResizetizerIsUWPApp)' == 'True' Or '$(_ResizetizerIsWindowsAppSdk)' == 'True'" />
			<Output ItemName="TizenResource" TaskParameter="Output" Condition="'$(_ResizetizerIsTizenApp)' == 'True'" />
		</GetUnoAssetPath>
	</Target>

	<Target Name="ProcessMauiSplashScreens"
        Condition="'@(MauiSplashScreen)' != ''"
        Inputs="$(MSBuildThisFileFullPath);$(_ResizetizerTaskAssemblyName);$(_MauiSplashInputsFile);@(MauiSplashScreen)"
        Outputs="$(_MauiSplashStampFile)">

		<Warning
            Condition="'@(MauiSplashScreen->Count())' &gt; '1'"
            Text="More than one 'MauiSplashScreen' is defined; only the first will be used."
        />

		<!-- Android -->
		<GenerateSplashAndroidResources
            Condition="'$(_ResizetizerIsAndroidApp)' == 'True'"
            IntermediateOutputPath="$(_MauiIntermediateSplashScreen)"
            MauiSplashScreen="@(MauiSplashScreen)"
        />
		<ItemGroup Condition="'$(_ResizetizerIsAndroidApp)' == 'True'">
			<UnoImage Include="@(MauiSplashScreen)" />
			<LibraryResourceDirectories Condition="Exists('$(_MauiIntermediateSplashScreen)')" Include="$(_MauiIntermediateSplashScreen)">
				<StampFile>$(_ResizetizerStampFile)</StampFile>
			</LibraryResourceDirectories>
			<FileWrites Include="$(_MauiIntermediateSplashScreen)**\*" />
		</ItemGroup>

		<!-- iOS, but not Catalyst -->
		<GenerateSplashStoryboard
            Condition="'$(_ResizetizerIsiOSApp)' == 'True' and '$(TargetPlatformIdentifier)' != 'maccatalyst'"
            OutputFile="$(_MauiIntermediateStoryboard)"
            MauiSplashScreen="@(MauiSplashScreen)"
        />
		<PropertyGroup Condition="'$(_ResizetizerIsiOSApp)' == 'True' and '$(TargetPlatformIdentifier)' != 'maccatalyst'">
			<_MauiStoryboardForPList>$(_MauiIntermediateStoryboard)</_MauiStoryboardForPList>
		</PropertyGroup>
		<ItemGroup Condition="'$(_ResizetizerIsiOSApp)' == 'True' and '$(TargetPlatformIdentifier)' != 'maccatalyst'">
			<UnoImage Include="@(MauiSplashScreen)" />
			<InterfaceDefinition Include="$(_MauiIntermediateStoryboard)" Link="$([System.IO.Path]::GetFileName($(_MauiIntermediateStoryboard)))" />
			<FileWrites Include="$(_MauiIntermediateStoryboard)" />
		</ItemGroup>

		<!-- UWP / WinUI -->
		<GenerateSplashAssets
            Condition="'$(_ResizetizerIsUWPApp)' == 'True' Or '$(_ResizetizerIsWindowsAppSdk)' == 'True'"
            IntermediateOutputPath="$(_MauiIntermediateSplashScreen)"
            MauiSplashScreen="@(MauiSplashScreen)"
        />
		<ItemGroup Condition="'$(_ResizetizerIsUWPApp)' == 'True' Or '$(_ResizetizerIsWindowsAppSdk)' == 'True'">
			<_MauiSplashAssets Include="$(_MauiIntermediateSplashScreen)**\*" />
			<ContentWithTargetPath Include="@(_MauiSplashAssets)">
				<TargetPath>%(_MauiSplashAssets.Filename)%(_MauiSplashAssets.Extension)</TargetPath>
			</ContentWithTargetPath>
			<FileWrites Include="@(_MauiSplashAssets)" />
		</ItemGroup>

		<!-- Tizen -->
		<TizenSplashUpdater
            Condition="'$(_ResizetizerIsTizenApp)' == 'True'"
            IntermediateOutputPath="$(_MauiIntermediateSplashScreen)"
            MauiSplashScreen="@(MauiSplashScreen)" />

		<ItemGroup Condition="'$(_ResizetizerIsTizenApp)' == 'True'">
			<UnoImage Include="@(MauiSplashScreen)" />
			<_MauiSplashScreens Include="$(_MauiIntermediateSplashScreen)splash\*" />
			<TizenTpkUserIncludeFiles Include="@(_MauiSplashScreens)" TizenTpkSubDir="shared\res\splash" />
		</ItemGroup>
		<MakeDir Directories="$(IntermediateOutputPath)"/>
		<!-- Stamp file for Outputs -->
		<Touch Files="$(_MauiSplashStampFile)" AlwaysCreate="True" />
		<ItemGroup>
			<FileWrites Include="$(_MauiSplashStampFile)" />
		</ItemGroup>
	</Target>

	<Target Name="ResizetizeImages"
        Inputs="$(MSBuildThisFileFullPath);$(_ResizetizerTaskAssemblyName);$(_ResizetizerInputsFile);@(UnoImage)"
        Outputs="$(_ResizetizerStampFile)"
        AfterTargets="$(ResizetizeAfterTargets)"
        BeforeTargets="$(ResizetizeBeforeTargets)"
        DependsOnTargets="$(ResizetizeDependsOnTargets)">

		<DetectInvalidResourceOutputFilenamesTask
            Items="@(UnoImage->Distinct())"
            ErrorMessage="$(_ResizetizerDefaultInvalidFilenamesErrorMessage)">
		</DetectInvalidResourceOutputFilenamesTask>

		<!-- Resize the images -->
		<ResizetizeImages
            PlatformType="$(ResizetizerPlatformType)"
            IntermediateOutputPath="$(_UnoIntermediateImages)"
			IntermediateOutputIconPath="$(_UnoIntermediateAppIcon)"
			PWAManifestPath="$(_WasmPwaManifestPath)"
            InputsFile="$(_ResizetizerInputsFile)"
            Images="@(UnoImage->Distinct())">

			<Output PropertyName="AppIconPath"
					TaskParameter="GeneratedIconPath" />
			<Output PropertyName="AndroidIcons"
					TaskParameter="AndroidAppIcons"/>
			<Output PropertyName="ResizetizerPwaManifest"
					TaskParameter="PwaGeneratedManifestPath"/>
		</ResizetizeImages>

		<ItemGroup>
			<!-- Get Images that were generated -->
			<!-- Either from the task, or if the task was skipped (up to date), use the wildcard lookup -->
			<_ResizetizerCollectedImages Condition="'@(CopiedResources)' != ''" Include="@(CopiedResources)" />
			<_ResizetizerCollectedImages Condition="'@(CopiedResources)' == ''" Include="$(_UnoIntermediateImages)**\*"/>
			<_ResizetizerCollectedAppIcons Include="$(_UnoIntermediateAppIcon)**\*"/>
		</ItemGroup>


		<ItemGroup Condition="'$(_ResizetizerIsWasm)' != 'True'">
			<Content Include="@(_ResizetizerCollectedImages)"
					 Link="%(_ResizetizerCollectedImages.RecursiveDir)%(_ResizetizerCollectedImages.Filename)%(_ResizetizerCollectedImages.Extension)" >
			</Content>

			<FileWrites Include="@(_ResizetizerCollectedImages)" />
		</ItemGroup>

		<!-- Wasm -->
		<ItemGroup Condition="'$(_ResizetizerIsWasm)' == 'True'">
			<Content Include="@(_ResizetizerCollectedImages->FullPath())"
					 Link="%(_ResizetizerCollectedImages.RecursiveDir)%(_ResizetizerCollectedImages.Filename)%(_ResizetizerCollectedImages.Extension)" >
			</Content>

			<Content Include="@(_ResizetizerCollectedAppIcons->FullPath())"
					 Condition="'%(Extension)' != '.ico'"
					 Link="%(_ResizetizerCollectedAppIcons.RecursiveDir)%(_ResizetizerCollectedAppIcons.Filename)%(_ResizetizerCollectedAppIcons.Extension)"/>

			<Content Include="@(_ResizetizerCollectedAppIcons->FullPath())"
					 Condition="'%(Extension)' == '.ico'"
					 UnoDeploy="Root"
					 Link="%(_ResizetizerCollectedAppIcons.RecursiveDir)%(_ResizetizerCollectedAppIcons.Filename)%(_ResizetizerCollectedAppIcons.Extension)"/>
			
			<FileWrites Include="@(_ResizetizerCollectedImages)" />
		</ItemGroup>

		<ItemGroup Condition="'$(_ResizetizerIsWasm)' == 'True'">
			<Content Remove="$(WasmPWAManifestFile)" />
			<!-- <WasmPWAManifestFile>$(ResizetizerPwaManifest)</WasmPWAManifestFile> -->
			<Content Include="$(ResizetizerPwaManifest)"
					 Link="$(WasmPWAManifestFile)" />
		</ItemGroup>

		<!-- Android -->
		<ItemGroup Condition="'$(_ResizetizerIsAndroidApp)' == 'True'">
			<AndroidResource Include="@(_ResizetizerCollectedAppIcons)"
					 Link="%(_ResizetizerCollectedAppIcons.RecursiveDir)%(_ResizetizerCollectedAppIcons.Filename)%(_ResizetizerCollectedAppIcons.Extension)" >
			</AndroidResource>
		</ItemGroup>


		<ItemGroup Condition="'$(_ResizetizerIsiOSApp)' == 'True'">
			<_ResizetizerCollectedBundleResourceImages Include="@(_ResizetizerCollectedImages->'%(FullPath)')">
				<LogicalName>%(_ResizetizerCollectedImages.Filename)%(_ResizetizerCollectedImages.Extension)</LogicalName>
				<TargetPath>%(_ResizetizerCollectedImages.Filename)%(_ResizetizerCollectedImages.Extension)</TargetPath>
			</_ResizetizerCollectedBundleResourceImages>

			<ImageAsset
                Include="@(_ResizetizerCollectedBundleResourceImages)"
                Condition="'@(_ResizetizerCollectedBundleResourceImages->Contains('Assets.xcassets'))' == 'True' and '%(_ResizetizerCollectedBundleResourceImages.Identity)' != ''">
				<LogicalName>Assets.xcassets\$([System.IO.Path]::GetFileName($([System.IO.Path]::GetDirectoryName(%(_ResizetizerCollectedBundleResourceImages.Identity)))))\%(_ResizetizerCollectedBundleResourceImages.Filename)%(_ResizetizerCollectedBundleResourceImages.Extension)</LogicalName>
				<TargetPath>Assets.xcassets\$([System.IO.Path]::GetFileName($([System.IO.Path]::GetDirectoryName(%(_ResizetizerCollectedBundleResourceImages.Identity)))))\%(_ResizetizerCollectedBundleResourceImages.Filename)%(_ResizetizerCollectedBundleResourceImages.Extension)</TargetPath>
				<Link>Assets.xcassets\$([System.IO.Path]::GetFileName($([System.IO.Path]::GetDirectoryName(%(_ResizetizerCollectedBundleResourceImages.Identity)))))\%(_ResizetizerCollectedBundleResourceImages.Filename)%(_ResizetizerCollectedBundleResourceImages.Extension)</Link>
			</ImageAsset>
		</ItemGroup>

		<!-- iOS Only -->
		<!-- If on Windows, using build host, copy the files over to build server host too -->
		<ItemGroup Condition="'$(BuildSessionId)' != '' And '$(_ResizetizerIsiOSApp)' == 'True' And '$(IsMacEnabled)'=='true'">
			<_UnoImagesToCopyToBuildServer Include="@(_ResizetizerCollectedBundleResourceImages)">
				<TargetPath>%(Identity)</TargetPath>
			</_UnoImagesToCopyToBuildServer>
		</ItemGroup>
		<CopyFilesToBuildServer
            Condition="'$(BuildSessionId)' != '' And '$(_ResizetizerIsiOSApp)' == 'True' And '$(IsMacEnabled)'=='true'"
            SessionId="$(BuildSessionId)"
            Files="@(_UnoImagesToCopyToBuildServer)" />

		<PropertyGroup>
			<ApplicationIcon Condition="'$(ApplicationIcon)' == ''">$(AppIconPath)</ApplicationIcon>
		</PropertyGroup>

		<!-- Tizen -->
		<PropertyGroup>
			<ResizetizerIntermediateOutputAbsolutePath>$([System.IO.Path]::GetFullPath('$(_UnoIntermediateImages)'))</ResizetizerIntermediateOutputAbsolutePath>
		</PropertyGroup>
		<ItemGroup Condition="'$(_ResizetizerIsTizenApp)' == 'True' And '@(_ResizetizerCollectedImages)' != ''">
			<TizenTpkUserIncludeFiles Include="$(ResizetizerIntermediateOutputAbsolutePath)res\res.xml" TizenTpkSubDir="res\" />
			<FileWrites Include="$(ResizetizerIntermediateOutputAbsolutePath)res\res.xml)" />

			<TizenTpkUserIncludeFiles Include="@(_ResizetizerCollectedImages)">
				<TizenTpkSubDir>$([MSBuild]::MakeRelative($(ResizetizerIntermediateOutputAbsolutePath), $([System.IO.Path]::GetFullPath('%(_ResizetizerCollectedImages.RelativeDir)'))))</TizenTpkSubDir>
			</TizenTpkUserIncludeFiles>
			<FileWrites Include="@(_ResizetizerCollectedImages)" />
		</ItemGroup>

		<!-- Touch/create our stamp file for outputs -->
		<Touch Files="$(_ResizetizerStampFile)" AlwaysCreate="True" />

		<!-- Include our images and stamp file as filewrites so they don't get rm'd -->
		<ItemGroup>
			<FileWrites Include="$(_ResizetizerStampFile)" />
		</ItemGroup>
	</Target>

	<!-- This is required because the "CalculateAppxGenerateProjectPriEnabled" target explicitly depends
         on "_ValidatePresenceOfAppxManifestItems" and we need to get in before then. -->
	<Target Name="_ValidatePresenceOfAppxManifestItemsBeforeTarget"
            BeforeTargets="_ValidatePresenceOfAppxManifestItems"
            DependsOnTargets="MauiGeneratePackageAppxManifest"
            Condition="'$(_ResizetizerIsUWPApp)' == 'True' Or '$(_ResizetizerIsWindowsAppSdk)' == 'True'" />

	<Target Name="MauiGeneratePackageAppxManifest"
            Condition="('$(_ResizetizerIsUWPApp)' == 'True' Or '$(_ResizetizerIsWindowsAppSdk)' == 'True') And ('@(AppxManifest)@(_MauiAppxManifest)' !='')"
            DependsOnTargets="$(MauiGeneratePackageAppxManifestDependsOnTargets)"
            Inputs="$(MSBuildThisFileFullPath);$(_ResizetizerTaskAssemblyName);$(_ResizetizerInputsFile);$(_MauiSplashInputsFile);@(AppxManifest);@(_MauiAppxManifest)"
            Outputs="$(_MauiManifestStampFile);$(_MauiIntermediateManifest)Package.appxmanifest">

		<PropertyGroup>
			<_MauiWindowsApplicationId Condition="'$(_MauiWindowsApplicationId)' == '' and '$(ApplicationIdGuid)' != ''">$(ApplicationIdGuid)</_MauiWindowsApplicationId>
			<_MauiWindowsApplicationId Condition="'$(_MauiWindowsApplicationId)' == '' and '$(ApplicationId)' != ''">$(ApplicationId)</_MauiWindowsApplicationId>
		</PropertyGroup>

		<GeneratePackageAppxManifest
            IntermediateOutputPath="$(_MauiIntermediateManifest)"
            AppxManifest="@(AppxManifest);@(_MauiAppxManifest)"
            GeneratedFilename="Package.appxmanifest"
            ApplicationId="$(_MauiWindowsApplicationId)"
            ApplicationDisplayVersion="$(ApplicationDisplayVersion)"
            ApplicationVersion="$(ApplicationVersion)"
            ApplicationTitle="$(ApplicationTitle)"
            AppIcon="@(UnoImage->WithMetadataValue('IsAppIcon', 'true'))"
            SplashScreen="@(MauiSplashScreen)" />

		<!-- replace user manifest -->
		<ItemGroup Condition="'@(AppxManifest)' != ''">
			<AppxManifest Remove="@(AppxManifest)" />
			<AppxManifest Include="$(_MauiIntermediateManifest)Package.appxmanifest" />
		</ItemGroup>
		<ItemGroup Condition="'@(_MauiAppxManifest)' != ''">
			<_MauiAppxManifest Remove="@(_MauiAppxManifest)" />
			<_MauiAppxManifest Include="$(_MauiIntermediateManifest)Package.appxmanifest" />
		</ItemGroup>

		<!-- Stamp file for Outputs -->
		<Touch Files="$(_MauiManifestStampFile)" AlwaysCreate="True" />
		<ItemGroup>
			<FileWrites Include="$(_MauiManifestStampFile)" />
		</ItemGroup>

	</Target>

	<!-- This is required because the "GetAssemblyAttributes" target does not have an open DependsOnTargets. -->
	<Target Name="_GetAssemblyAttributesBeforeTarget"
            BeforeTargets="GetAssemblyAttributes"
            DependsOnTargets="MauiGeneratePackageAppxManifest;_MauiGetAssemblyAttributesFromAppxManifest"
            Condition="'$(_ResizetizerIsUWPApp)' == 'True' Or '$(_ResizetizerIsWindowsAppSdk)' == 'True'" />

	<Target Name="_MauiGetAssemblyAttributesFromAppxManifest"
            Condition="('@(AppxManifest)@(_MauiAppxManifest)' !='')">

		<PropertyGroup>
			<_MauiAppxManifestContents>$([System.IO.File]::ReadAllText('$(_MauiIntermediateManifest)Package.appxmanifest'))</_MauiAppxManifestContents>
		</PropertyGroup>

		<XmlPeek
            Namespaces="&lt;Namespace Prefix='ns' Uri='http://schemas.microsoft.com/appx/manifest/foundation/windows10'/&gt;"
            XmlContent="$(_MauiAppxManifestContents)"
            Query="/ns:Package/ns:Identity/@Name">
			<Output TaskParameter="Result" ItemName="_MauiAppxManifestIdentity" />
		</XmlPeek>
		<XmlPeek
            Namespaces="&lt;Namespace Prefix='ns' Uri='http://schemas.microsoft.com/appx/manifest/foundation/windows10'/&gt;"
            XmlContent="$(_MauiAppxManifestContents)"
            Query="/ns:Package/ns:Identity/@Version">
			<Output TaskParameter="Result" ItemName="_MauiAppxManifestVersion" />
		</XmlPeek>
		<XmlPeek
            Namespaces="&lt;Namespace Prefix='ns' Uri='http://schemas.microsoft.com/appx/manifest/foundation/windows10'/&gt;"
            XmlContent="$(_MauiAppxManifestContents)"
            Query="/ns:Package/ns:Properties/ns:PublisherDisplayName/text()">
			<Output TaskParameter="Result" ItemName="_MauiAppxManifestPublisher" />
		</XmlPeek>
		<XmlPeek
            Namespaces="&lt;Namespace Prefix='ns' Uri='http://schemas.microsoft.com/appx/manifest/foundation/windows10'/&gt;"
            XmlContent="$(_MauiAppxManifestContents)"
            Query="/ns:Package/ns:Properties/ns:DisplayName/text()">
			<Output TaskParameter="Result" ItemName="_MauiAppxManifestDisplayName" />
		</XmlPeek>

		<ItemGroup>
			<AssemblyAttribute Include="System.Reflection.AssemblyMetadataAttribute">
				<_Parameter1>Microsoft.Maui.ApplicationModel.AppInfo.PackageName</_Parameter1>
				<_Parameter2>@(_MauiAppxManifestIdentity)</_Parameter2>
			</AssemblyAttribute>
			<AssemblyAttribute Include="System.Reflection.AssemblyMetadataAttribute">
				<_Parameter1>Microsoft.Maui.ApplicationModel.AppInfo.PublisherName</_Parameter1>
				<_Parameter2>@(_MauiAppxManifestPublisher)</_Parameter2>
			</AssemblyAttribute>
			<AssemblyAttribute Include="System.Reflection.AssemblyMetadataAttribute">
				<_Parameter1>Microsoft.Maui.ApplicationModel.AppInfo.Name</_Parameter1>
				<_Parameter2>@(_MauiAppxManifestDisplayName)</_Parameter2>
			</AssemblyAttribute>
			<AssemblyAttribute Include="System.Reflection.AssemblyMetadataAttribute">
				<_Parameter1>Microsoft.Maui.ApplicationModel.AppInfo.Version</_Parameter1>
				<_Parameter2>@(_MauiAppxManifestVersion)</_Parameter2>
			</AssemblyAttribute>
		</ItemGroup>
	</Target>

	<Target Name="MauiGenerateTizenManifest"
            Condition="'$(_ResizetizerIsTizenApp)' == 'True'"
            BeforeTargets="$(ResizetizeBeforeTargets)"
            AfterTargets="$(ResizetizeImages)"
            Inputs="$(MSBuildThisFileFullPath);$(_ResizetizerTaskAssemblyName);$(_ResizetizerInputsFile);$(_MauiSplashInputsFile);$(TizenManifestFile)"
            Outputs="$(_MauiManifestStampFile);$(_MauiIntermediateManifest)tizen-manifest.xml">

		<GenerateTizenManifest
            IntermediateOutputPath="$(_MauiIntermediateManifest)"
            TizenManifestFile="$(TizenManifestFile)"
            GeneratedFilename="tizen-manifest.xml"
            ApplicationId="$(ApplicationId)"
            ApplicationDisplayVersion="$(ApplicationDisplayVersion)"
            ApplicationVersion="$(ApplicationVersion)"
            ApplicationTitle="$(ApplicationTitle)"
            AppIcon="@(UnoImage->WithMetadataValue('IsAppIcon', 'true'))"
            SplashScreen="@(MauiSplashScreen)" />

		<!-- replace user manifest -->
		<PropertyGroup>
			<TizenManifestFile>$(_MauiIntermediateManifest)tizen-manifest.xml</TizenManifestFile>
		</PropertyGroup>

		<!-- Stamp file for Outputs -->
		<Touch Files="$(_MauiManifestStampFile)" AlwaysCreate="True" />
		<ItemGroup>
			<FileWrites Include="$(_MauiManifestStampFile)" />
		</ItemGroup>
	</Target>

	<Target Name="_CleanResizetizer">
		<RemoveDir Directories="$(_ResizetizerIntermediateOutputRoot)" Condition="Exists ('$(_ResizetizerIntermediateOutputRoot)' )" />
	</Target>

</Project>
